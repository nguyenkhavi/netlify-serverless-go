// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum ESuggestionType {
  SUGGESTION
  REPORT
}

enum EActivityAction {
  CHANGE_PASSWORD
  LOG_IN
  SIGN_UP
}

model UserWallet {
  userId String
  wallet String @id

  @@map("user-wallets")
}

model NotificationSetting {
  userId    String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  itemSold           Boolean @default(true)
  bidActivity        Boolean @default(true)
  priceChange        Boolean @default(false)
  auctionExpiration  Boolean @default(false)
  outBid             Boolean @default(false)
  ownedItemUpdates   Boolean @default(false)
  successfulPurchase Boolean @default(false)
  fleamintNewsletter Boolean @default(false)
  mentions           Boolean @default(false)
  replies            Boolean @default(false)
  messages           Boolean @default(false)
  suggestedItems     Boolean @default(false)

  @@map("notification-settings")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country               String?
  state                 String?
  streetAddress         String?
  secondStreetAddress   String?
  apartmentNumber       String?
  postCode              String?
  phoneNumber           String?
  phoneCode             String?
  additionalInformation String?

  isDefault Boolean @default(false)

  @@map("addresses")
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  browser   String?
  ipAddress String?
  location  String?
  action    EActivityAction

  @@map("user-activities")
}

model SecurityQuestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question    String
  userAnswers UserAnswer[]

  @@map("security-questions")
}

model UserAnswer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  questionId String
  question   SecurityQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  memorableAnswer String

  @@unique([userId, questionId])
  @@map("user-answers")
}

model Suggestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String

  type   ESuggestionType
  detail String

  @@map("suggestions")
}

model Achievement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalVolume    Int
  projects       Int
  globalPartners Int
  totalUser      Int

  @@map("achievements")
}

model Subscriber {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique

  @@map("subscribers")
}

model KYCInfo {
  userId           String   @id @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  personaInquiryId String   @unique

  completedAt          DateTime
  firstName            String?
  lastName             String?
  birthDate            DateTime?
  addressStreet1       String?
  addressStreet2       String?
  addressCity          String?
  addressPostalCode    String?
  identificationNumber String?
  phoneNumber          String?

  @@map("kyc-information")
}

model Chain {
  chainId String @id

  name String
  code String

  collections Collection[]
  tokens      Token[]

  @@map("chains")
}

enum ETokenStandard {
  ERC_721
  ERC_1155
}

model Collection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId            String
  metadata             String
  name                 String
  contractAddress      String
  tokenStandard        ETokenStandard @default(ERC_721)
  image                String
  royaltyFeePercentage Float

  chainId String
  chain   Chain  @relation(fields: [chainId], references: [chainId])

  items          Item[]
  marketListings MarketListing[]
  activities     Activity[]

  @@map("collections")
}

model Item {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])

  // userId: user own this item
  userId          String
  tokenId         String
  contractAddress String

  image    String
  metadata String
  name     String

  marketListings MarketListing[]
  activities     Activity[]

  @@map("items")
}

enum EMarketType {
  AUCTION
  DIRECT_LISTING
}

enum EMarketStatus {
  AVAILABLE
  CANCELLED
  EXPIRED
  SUCCESS
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokenContract String
  tokenSymbol   String
  tokenName     String
  tokenDecimal  Int

  chainId String
  chain   Chain  @relation(fields: [chainId], references: [chainId])

  marketListings MarketListing[]
  activities     Activity[]

  @@map("tokens")
}

model MarketListing {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String

  itemId String
  item   Item   @relation(fields: [itemId], references: [id])

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])

  tokenId String
  token   Token  @relation(fields: [tokenId], references: [id])

  marketType EMarketType
  price      Float
  quantity   Int         @default(1)

  // only for auction
  expiredAt    DateTime?
  buyoutPrice  Float?
  reservePrice Float?

  //royaltyFeePercentage: Maybe use for solana
  royaltyFeePercentage Float
  transactionHash      String

  bids Bid[]

  @@map("market-listings")
}

model Bid {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  marketId String
  market   MarketListing @relation(fields: [marketId], references: [id])

  userId          String
  price           Float
  transactionHash String

  @@map("bids")
}

enum EActivityType {
  TRANSFER
  MINT
  BURN
  SELL
  BUY
  BID
  ACCEPT_BID
  UPDATE_LISTING
  CANCEL_LISTING
  CANCEL_BID
}

model Activity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type       EActivityType
  fromUserId String
  toUserId   String?
  price      Float?

  tokenId String?
  token   Token?  @relation(fields: [tokenId], references: [id])

  collectionId String?
  collection   Collection? @relation(fields: [collectionId], references: [id])

  transactionHash String?

  itemId   String
  item     Item   @relation(fields: [itemId], references: [id])
  quantity Int?

  @@map("activities")
}
